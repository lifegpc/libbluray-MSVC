cmake_minimum_required(VERSION 3.14)

set(BLURAY_VERSION_MAJOR 1)
set(BLURAY_VERSION_MINOR 3)
set(BLURAY_VERSION_MICRO 0)
set(BLURAY_VERSION ${BLURAY_VERSION_MAJOR}.${BLURAY_VERSION_MINOR}.${BLURAY_VERSION_MICRO})

project(libbluray VERSION ${BLURAY_VERSION})

option(BUILD_EXAMPLES "build examples" ON)
option(ENABLE_LIBXML2 "build with libxml2 support" ON)
option(ENABLE_FREETYPE "build with freetype support" ON)
option(ENABLE_FONTCONFIG "build with fontconfig support" ON)
option(ENABLE_TEST "build test execuable" ON)
option(JDK_HOME "The home of Java JDK" "")
option(JAVA_OS "The os type of java. (Such as win32)" "")
option(BDJAVA_JAR "Build BD-Java JAR file." ON)
option(BDJ_BOOTCLASSPATH "Specify BD-J build-time bootclass path (example /opt/PhoneME/lib/btclasses.zip;/opt/PhoneME/lib/xmlparer.jar)." "")
option(JAVA9 "Build with Java 9+ (drop support for Java <1.6)" OFF)
option(J2ME "Use j2me to BD-J implementation." OFF)

if (ENABLE_LIBXML2)
    find_package(LibXml2 2.6 REQUIRED)
    set(HAVE_LIBXML2 1)
endif()

if (ENABLE_FREETYPE)
    find_package(Freetype REQUIRED)
    set(HAVE_FT2 1)
endif()

if (ENABLE_FONTCONFIG) 
    find_package(Fontconfig REQUIRED)
    set(HAVE_FONTCONFIG 1)
endif()

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

find_package(Libudfread 1.1.0)

set(OBJS src/file/dirs.h src/file/dl.h src/file/file.h src/file/file.c src/file/filesystem.h src/file/filesystem.c src/file/mount.h src/libbluray/bluray.h src/libbluray/bluray.c src/libbluray/bluray_internal.h src/libbluray/bluray-version.h src/libbluray/keys.h src/libbluray/player_settings.h src/libbluray/register.h src/libbluray/register.c src/libbluray/bdnav/bdid_parse.h src/libbluray/bdnav/bdid_parse.c src/libbluray/bdnav/bdmv_parse.h src/libbluray/bdnav/bdmv_parse.c src/libbluray/bdnav/bdparse.h src/libbluray/bdnav/clpi_parse.c src/libbluray/bdnav/clpi_parse.h src/libbluray/bdnav/extdata_parse.h src/libbluray/bdnav/extdata_parse.c src/libbluray/bdnav/index_parse.h src/libbluray/bdnav/index_parse.c src/libbluray/bdnav/meta_data.h src/libbluray/bdnav/meta_parse.h src/libbluray/bdnav/meta_parse.c src/libbluray/bdnav/mpls_parse.h src/libbluray/bdnav/mpls_data.h src/libbluray/bdnav/mpls_parse.c src/libbluray/bdnav/navigation.h src/libbluray/bdnav/navigation.c src/libbluray/bdnav/sound_parse.h src/libbluray/bdnav/sound_parse.c src/libbluray/bdnav/uo_mask.h src/libbluray/bdnav/uo_mask.c src/libbluray/bdnav/uo_mask_table.h src/libbluray/decoders/graphics_controller.h src/libbluray/decoders/graphics_controller.c src/libbluray/decoders/graphics_processor.h src/libbluray/decoders/graphics_processor.c src/libbluray/decoders/hdmv_pids.h src/libbluray/decoders/ig.h src/libbluray/decoders/ig_decode.h src/libbluray/decoders/ig_decode.c src/libbluray/decoders/m2ts_demux.h src/libbluray/decoders/m2ts_demux.c src/libbluray/decoders/m2ts_filter.h src/libbluray/decoders/m2ts_filter.c src/libbluray/decoders/overlay.h src/libbluray/decoders/pg.h src/libbluray/decoders/pg_decode.h src/libbluray/decoders/pg_decode.c src/libbluray/decoders/pes_buffer.h src/libbluray/decoders/pes_buffer.c src/libbluray/decoders/rle.h src/libbluray/decoders/rle.c src/libbluray/decoders/textst.h src/libbluray/decoders/textst_decode.h src/libbluray/decoders/textst_decode.c src/libbluray/decoders/textst_render.h src/libbluray/decoders/textst_render.c src/libbluray/disc/aacs.h src/libbluray/disc/aacs.c src/libbluray/disc/bdplus.h src/libbluray/disc/bdplus.c src/libbluray/disc/dec.h src/libbluray/disc/dec.c src/libbluray/disc/disc.h src/libbluray/disc/disc.c src/libbluray/disc/enc_info.h src/libbluray/disc/properties.h src/libbluray/disc/properties.c src/libbluray/hdmv/hdmv_insn.h src/libbluray/hdmv/hdmv_vm.h src/libbluray/hdmv/hdmv_vm.c src/libbluray/hdmv/mobj_data.h src/libbluray/hdmv/mobj_parse.h src/libbluray/hdmv/mobj_parse.c src/libbluray/hdmv/mobj_print.h src/libbluray/hdmv/mobj_print.c src/util/array.h src/util/array.c src/util/attributes.h src/util/bits.h src/util/bits.c src/util/event_queue.h src/util/event_queue.c src/util/logging.h src/util/logging.c src/util/log_control.h src/util/macro.h src/util/mutex.h src/util/mutex.c src/util/refcnt.h src/util/refcnt.c src/util/strutl.h src/util/strutl.c src/util/time.h src/util/time.c src/libbluray/disc/udf_fs.h src/libbluray/disc/udf_fs.c)
list(APPEND OBJS src/libbluray/bdj/bdj.h src/libbluray/bdj/bdj.c src/libbluray/bdj/bdjo_data.h src/libbluray/bdj/bdjo_parse.h src/libbluray/bdj/bdjo_parse.c src/libbluray/bdj/native/bdjo.h src/libbluray/bdj/native/bdjo.c src/libbluray/bdj/native/java_awt_BDFontMetrics.h src/libbluray/bdj/native/java_awt_BDFontMetrics.c src/libbluray/bdj/native/java_awt_BDGraphics.h src/libbluray/bdj/native/java_awt_BDGraphics.c src/libbluray/bdj/native/org_videolan_Libbluray.h src/libbluray/bdj/native/org_videolan_Libbluray.c src/libbluray/bdj/native/org_videolan_Logger.h src/libbluray/bdj/native/org_videolan_Logger.c src/libbluray/bdj/native/register_native.h src/libbluray/bdj/native/register_native.c src/libbluray/bdj/native/util.h src/libbluray/bdj/native/util.c)

set(HEADERS ${CMAKE_SOURCE_DIR}/src/file/filesystem.h ${CMAKE_SOURCE_DIR}/src/libbluray/bluray.h ${CMAKE_SOURCE_DIR}/src/libbluray/bluray-version.h ${CMAKE_SOURCE_DIR}/src/libbluray/keys.h ${CMAKE_SOURCE_DIR}/src/libbluray/player_settings.h ${CMAKE_SOURCE_DIR}/src/libbluray/bdnav/clpi_data.h ${CMAKE_SOURCE_DIR}/src/libbluray/bdnav/meta_data.h ${CMAKE_SOURCE_DIR}/src/libbluray/decoders/overlay.h ${CMAKE_SOURCE_DIR}/src/util/log_control.h)

include_directories(${CMAKE_SOURCE_DIR})
include_directories(${CMAKE_SOURCE_DIR}/src)
include_directories(${CMAKE_SOURCE_DIR}/src/libbluray)

find_package(Java COMPONENTS Development)
find_package(JNI)

if (JAVA_FOUND AND JNI_FOUND)
    message(STATUS "The version of java is ${Java_VERSION_STRING}")
    message(STATUS "jni.h is located in ${JAVA_INCLUDE_PATH}.")
    message(STATUS "jni_md.h is located in ${JAVA_INCLUDE_PATH2}.")
    include_directories(${JAVA_INCLUDE_PATH})
    include_directories(${JAVA_INCLUDE_PATH2})
    if (BDJAVA_JAR)
        find_program(ANT_PATH NAMES ant)
        if (NOT ANT_PATH)
            message(FATAL_ERROR "BD-J requires ANT, but ant was not found. Install ant or disable jar file building.")
        endif()
        message(STATUS "Ant is located in ${ANT_PATH}.")
        if (JAVA9 AND NOT J2ME)
            if (${Java_VERSION_STRING} VERSION_GREATER 12)
                set(WITH_JAVA12 ON)
            endif()
            if (${Java_VERSION_STRING} VERSION_GREATER 9)
                set(WITH_JAVA9 ON)
            endif()
        endif()
        if (WITH_JAVA9 AND NOT J2ME)
            set(JAVA_CODE_VERSION 1.6)
        else()
            set(JAVA_CODE_VERSION 1.4)
        endif()
        if (WITH_JAVA12 AND NOT J2ME)
            set(JAVA_CODE_VERSION 1.7)
        endif()
        message(STATUS "Java code version: ${JAVA_CODE_VERSION}")
    endif()
    if (J2ME)
        set(HAVE_BDJ_J2ME 1)
    endif()
elseif (NOT JDK_HOME)
    include_directories(${CMAKE_SOURCE_DIR}/jni)
    include_directories(${CMAKE_SOURCE_DIR}/jni/${JAVA_OS})
else()
    message(FATAL_ERROR "Can not find java.")
endif()

string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} ARCH)

if (NOT LIBUDFREAD_FOUND)
    list(APPEND OBJS contrib/libudfread/src/blockinput.h contrib/libudfread/src/default_blockinput.h contrib/libudfread/src/default_blockinput.c contrib/libudfread/src/ecma167.h contrib/libudfread/src/ecma167.c contrib/libudfread/src/udfread.h contrib/libudfread/src/udfread.c)
else()
    include_directories(${LIBUDFREAD_INCLUDE_DIR})
    set(HAVE_LIBUDFREAD 1)
endif()

if (MSVC)
    list(APPEND OBJS src/file/dir_win32.c src/file/dirs_win32.c src/file/dl_win32.c src/file/file_win32.c src/file/mount.c)
    add_compile_options(/w44996)
    set(DLL_RC winres/dll.rc)
    set(BD_INFO_RC winres/bd_info.rc)
    set(BD_LIST_TITLES_RC winres/bd_list_titles.rc)
    set(BD_SPLICE_RC winres/bd_splice.rc)
endif()

add_library(libbluray SHARED ${OBJS} ${DLL_RC})
set_target_properties(libbluray PROPERTIES
PUBLIC_HEADER "${HEADERS}")
add_library(libbluray-static STATIC ${OBJS})

if (LIBUDFREAD_FOUND)
    target_link_libraries(libbluray ${LIBUDFREAD_LIBRARY})
endif()

if (LIBXML2_FOUND)
    include_directories(${LIBXML2_INCLUDE_DIRS})
    target_link_libraries(libbluray LibXml2::LibXml2)
endif()

if (FREETYPE_FOUND)
    include_directories(${FREETYPE_INCLUDE_DIRS})
    target_link_libraries(libbluray Freetype::Freetype)
    if (FONTCONFIG_FOUND)
        include_directories(${FONTCONFIG_INCLUDE_DIRS})
        target_link_libraries(libbluray Fontconfig::Fontconfig)
    endif()
endif()

include(CheckIncludeFiles)
include(CheckSymbolExists)
CHECK_INCLUDE_FILES(dirent.h HAVE_DIRENT_H)
CHECK_INCLUDE_FILES(dlfcn.h HAVE_DLFCN_H)
check_symbol_exists(dladdr dlfcn.h HAVE_DLADDR)
CHECK_INCLUDE_FILES(errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILES(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILES(mntent.h HAVE_MNTENT_H)
CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES(libgen.h HAVE_LIBGEN_H)
check_symbol_exists(optind unistd.h HAVE_OPTIND)

configure_file(src/libbluray/bluray-version.h.in ${CMAKE_SOURCE_DIR}/src/libbluray/bluray-version.h)
configure_file(cmake_config.h.in ${CMAKE_SOURCE_DIR}/config.h)

if (MSVC)
    configure_file(winres/dll.rc.in ${CMAKE_SOURCE_DIR}/winres/dll.rc)
    if (BUILD_EXAMPLES)
        configure_file(winres/bd_info.rc.in ${CMAKE_SOURCE_DIR}/winres/bd_info.rc)
        configure_file(winres/bd_list_titles.rc.in ${CMAKE_SOURCE_DIR}/winres/bd_list_titles.rc)
        configure_file(winres/bd_splice.rc.in ${CMAKE_SOURCE_DIR}/winres/bd_splice.rc)
    endif()
endif()

add_definitions(-DHAVE_CONFIG_H)

if(NOT HAVE_OPTIND)
    set(OPTIND win32/getopt.c)
    include_directories(${CMAKE_SOURCE_DIR}/win32)
endif()

if(BUILD_EXAMPLES)
    add_executable(bd_info src/examples/bd_info.c ${BD_INFO_RC})
    target_link_libraries(bd_info libbluray)
    add_executable(bd_splice src/examples/bdsplice.c ${OPTIND} ${BD_SPLICE_RC})
    target_link_libraries(bd_splice libbluray)
    add_executable(bd_list_titles src/examples/list_titles.c ${OPTIND} ${BD_LIST_TITLES_RC})
    target_link_libraries(bd_list_titles libbluray)
    set(EXAMPLES bd_info bd_splice bd_list_titles)
endif()

if(ENABLE_TEST)
    add_executable(bdj_test src/devtools/bdj_test.c)
    target_link_libraries(bdj_test libbluray)
    add_executable(bdjo_dump src/devtools/bdjo_dump.c)
    target_link_libraries(bdjo_dump libbluray)
    add_executable(clpi_dump src/devtools/clpi_dump.c src/devtools/util.c ${OPTIND})
    target_link_libraries(clpi_dump libbluray)
    add_executable(hdmv_test src/devtools/hdmv_test.c)
    target_link_libraries(hdmv_test libbluray)
    add_executable(index_dump src/examples/index_dump.c)
    target_link_libraries(index_dump libbluray)
    add_executable(libbluray_test src/examples/libbluray_test.c)
    target_link_libraries(libbluray_test libbluray)
    add_executable(mobj_dump src/devtools/mobj_dump.c src/libbluray/hdmv/mobj_print.c)
    target_link_libraries(mobj_dump libbluray)
    add_executable(mpls_dump src/devtools/mpls_dump.c src/devtools/util.c ${OPTIND})
    target_link_libraries(mpls_dump libbluray)
    add_executable(sound_dump src/examples/sound_dump.c)
    target_link_libraries(sound_dump libbluray)
endif()

if(BDJAVA_JAR)
    if(WITH_JAVA12)
        set(JAVA_VERSIONS -Djava_version_asm=1.7 -Djava_version_bdj=1.7)
    elseif(WITH_JAVA9)
        set(JAVA_VERSIONS -Djava_version_asm=1.6 -Djava_version_bdj=1.6)
    else()
        set(JAVA_VERSIONS -Djava_version_asm=1.5 -Djava_version_bdj=1.4)
    endif()
    if (NOT J2ME)
        set(AWT_SRC "java-j2se:java-build-support")
    else()
        set(AWT_SRC "java-j2me")
    endif()
    if (J2ME)
        set(BDJ_TYPE "j2me")
    else()
        set(BDJ_TYPE "j2se")
    endif()
    add_custom_target(JAR ALL ${ANT_PATH} -f ${CMAKE_SOURCE_DIR}/src/libbluray/bdj/build.xml -Dbuild="${CMAKE_BINARY_DIR}/src/libbluray/bdj/build" -Ddist="${CMAKE_BINARY_DIR}" -Dsrc_awt=:${AWT_SRC} ${JAVA_VERSIONS} -Dbootclasspath=${BDJ_BOOTCLASSPATH} -Dversion=${BDJ_TYPE}-${BLURAY_VERSION})
    
    if (NOT CMAKE_INSTALL_DATADIR)
        set(CMAKE_INSTALL_DATADIR share/java)
    endif()
    
    install(FILES ${CMAKE_BINARY_DIR}/libbluray-${BDJ_TYPE}-${BLURAY_VERSION}.jar ${CMAKE_BINARY_DIR}/libbluray-awt-${BDJ_TYPE}-${BLURAY_VERSION}.jar DESTINATION ${CMAKE_INSTALL_DATADIR})
endif()

if (NOT CMAKE_INSTALL_INCLUDEDIR)
    set(CMAKE_INSTALL_INCLUDEDIR include/libbluray)
endif()

install(TARGETS libbluray libbluray-static ${EXAMPLES}
PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
